@using BL.Enums
@using BL.Models
@using System.Security.Claims
@model UserOverviewViewModel
@functions {
    public string GetPinnedClass(int competenceId)
    {
        return Model.UserCompetences.FirstOrDefault(x => x.Competence.Id == competenceId)?.Pinned != true ? "far" : "fas";
    }

    public string GetBackgroundColorString(Competence competence)
    {
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        var competenceState = Model.UserCompetences.FirstOrDefault(x => x.Competence.Id == competence.Id)?.State;
        string backgroundColorString;
        switch (competenceState)
        {
            case CompetenceState.InProgress:
                backgroundColorString = "background-color: #ADD8E6;";
                break;
            case CompetenceState.Done:
                backgroundColorString = "background-color: green;";
                break;
            default:
                backgroundColorString = "";
                break;
        }
        return backgroundColorString;
    }
}
<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>
@{
    ViewData["Title"] = "Overview";
}
<body onload="changeColor()">


<h1>Pinned Competences</h1>
<hr />
<table class="competencetable" id="pinnedTable">
    @foreach (var pinnedCompetence in Model.UserCompetences.Where(x => x.Pinned).Select(x => x.Competence))
    {
        <tr>
            <td class="competence" onclick="location.href='@Url.Action("Details", "Home", new { id = pinnedCompetence.Id })'" style="@GetBackgroundColorString(pinnedCompetence)">
                @pinnedCompetence.CompetenceArea.Name: @pinnedCompetence.Name
            </td>
            <td style="min-width:0px;padding-right:0px;">
                <i onclick="location.href='@Url.Action("InvertPinState", "Home", new { id = pinnedCompetence.Id })'"
                class="@GetPinnedClass(pinnedCompetence.Id)">&#xf02e;</i>
            </td>
        </tr>
    }
</table>


<h1 style="margin-top: 70px;">All Competences</h1>
<hr />
@foreach (var competenceArea in Model.CompetenceAreas)
{
    <h4 class="competenceArea">@competenceArea.Name</h4>
    if (competenceArea.Competences.Any())
    {
            <table class="competencetable">
            <tbody>
                @foreach (var competenceLevel in competenceArea.Competences.GroupBy(x => x.Level).OrderBy(x => x.First().Level))
                {
                    <tr class="competence-level">
                        <td class="competence">@competenceLevel.First().Level</td>
                        @foreach (var competence in competenceLevel)
                        {
                                <td class="competence" onclick="location.href='@Url.Action("Details", "Home", new { id = competence.Id })'" style="@GetBackgroundColorString(competence)">
                                @competence.Name
                            </td>
                            <td style="min-width:0px;padding-right:0px;">
                                 <i onclick="location.href='@Url.Action("InvertPinState", "Home", new { id = competence.Id })'" class="@GetPinnedClass(competence.Id)">&#xf02e;</i>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>There are currently no Competences in this Area</p>
    }
        
}
</body>
