@model UserOverviewViewModel
@functions {
    public string GetPinnedClass(int competenceId)
    {
        return Model.UserCompetences.FirstOrDefault(x => x.Competence.Id == competenceId)?.Pinned != true ? "far" : "fas";
    }
}
<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>
@{
    ViewData["Title"] = "Overview";
}
<body onload="changeColor()">

<div class="pinned-competences">
    <h1>Pinned Competences</h1>
    <hr />
    <table class="table" id="pinnedTable">
        @foreach (var pinnedCompetence in Model.UserCompetences.Where(x => x.Pinned).Select(x => x.Competence))
        {
            <tr>
                @Html.HiddenFor(x => pinnedCompetence.UserCompetences.FirstOrDefault(x => x.CompetenceId == pinnedCompetence.Id).State)
                <td onclick="location.href='@Url.Action("Details", "Home", new { id = pinnedCompetence.Id })'">@pinnedCompetence.CompetenceArea.Name: @pinnedCompetence.Name</td>
                <td>
                    <i onclick="location.href='@Url.Action("InvertPinState", "Home", new { id = pinnedCompetence.Id })'"
                   class="@GetPinnedClass(pinnedCompetence.Id)">&#xf02e;</i>
                </td>
            </tr>
        }
    </table>
</div>

<div class="all-competences">
    <h1>All Competences</h1>
    <hr />
    @foreach (var competenceArea in Model.CompetenceAreas)
    {
        <h4>@competenceArea.Name</h4>
        if (competenceArea.Competences.Any())
        {
                <table class="table">
                <tbody>
                    @foreach (var competenceLevel in competenceArea.Competences.GroupBy(x => x.Level).OrderBy(x => x.First().Level))
                    {
                        <tr>
                            <td>@competenceLevel.First().Level</td>
                            @foreach (var competence in competenceLevel)
                            {
                                <td onclick="location.href='@Url.Action("Details", "Home", new { id = competence.Id })'">
                                    @competence.Name
                                    @Html.HiddenFor(x => competence.UserCompetences.FirstOrDefault(x => x.CompetenceId == competence.Id).State)
                                </td>
                                <td>
                                    <i onclick="location.href='@Url.Action("InvertPinState", "Home", new { id = competence.Id })'" class="@GetPinnedClass(competence.Id)">&#xf02e;</i>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>There are currently no Competences in this Area</p>
        }
        
    }
</table>
</body>
<script>
    function changeColor() {
       
        var input = document.querySelectorAll("input#State");
        for(var i = 0; i < input.length; i++){
            var oneInput = input[i];
            var tr = oneInput.parentNode;

            if(oneInput.value == "New"){
                tr.style.backgroundColor = "none";
            }
            else if(oneInput.value == "InProgress" ){
                tr.style.backgroundColor = "#ADD8E6";
            }
            else if (oneInput.value == "Done") {
                tr.style.backgroundColor = "green";
            }
        }       
    }
</script>
